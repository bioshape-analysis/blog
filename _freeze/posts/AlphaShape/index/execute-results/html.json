{
  "hash": "7a2ca4e69d8a3cf8fed1a4b7f6f6e072",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Alpha Shapes in 2D and 3D\"\ndate: \"August 14 2024\"\njupyter: python3\nauthor:\n  - name: \"Wenjun Zhao\" \ncategories: [theory]\n---\n\n\n## Introduction\n\nAlpha shapes are a generalization of the convex hull used in computational geometry. They are particularly useful for understanding the shape of a point cloud in both 2D and 3D spaces. In this document, we will explore alpha shapes in both dimensions using Python.\n\n## 2D Alpha Shape\n\nTo illustrate alpha shapes in 2D, we'll use the `alphashape` library. Let's start by generating a set of random points and compute their alpha shape.\n\nFirst we create point cloud points:\n\n::: {#fdde31ac .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport alphashape\n\ndef generate_flower_shape(num_petals, num_points_per_petal):\n    angles = np.linspace(0, 2 * np.pi, num_points_per_petal, endpoint=False)\n    r = 1 + 0.5 * np.sin(num_petals * angles)\n    \n    x = r* np.cos(angles)\n    \n    y = r * np.sin(angles)\n    \n    return np.column_stack((x, y))\n\ndef generate_random_points_in_bounds(num_points, x_bounds, y_bounds):\n    x = np.random.uniform(x_bounds[0], x_bounds[1], num_points)\n    y = np.random.uniform(y_bounds[0], y_bounds[1], num_points)\n    return np.column_stack((x, y))\n\ndef is_point_inside_polygon(point, polygon):\n    path = Path(polygon)\n    return path.contains_point(point)\n\nplt.figure(figsize=(8, 6))\npoints = generate_flower_shape(num_petals=6, num_points_per_petal=100)\nplt.scatter(points[:, 0], points[:, 1], s=10, color='blue', label='Points')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=656 height=485}\n:::\n:::\n\n\nTry run this with alpha shape radius 0.1:\n\n::: {#24309a33 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport alphashape\n\n# Generate random points\nnp.random.seed(0)\npoints = generate_flower_shape(num_petals=5, num_points_per_petal=200)\n# Create alpha shape\nalpha = 0.1\nalpha_shape = alphashape.alphashape(points, alpha)\n\n# Plot points and alpha shape\nplt.figure(figsize=(8, 6))\nplt.scatter(points[:, 0], points[:, 1], s=10, color='blue', label='Points')\nplt.plot(*alpha_shape.exterior.xy, color='red', lw=2, label='Alpha Shape')\nplt.title('2D Alpha Shape')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=675 height=523}\n:::\n:::\n\n\nOops, it seems the radius we picked is too big! \n\n::: {#131f460b .cell execution_count=3}\n``` {.python .cell-code}\nalpha_values = [0.1, 1.0, 3.0, 10.0]\n# Plot the flower shape and alpha shapes with varying alpha values\nfig, axes = plt.subplots(2, 2, figsize=(6,6))\naxes = axes.flatten()\n\nfor i, alpha in enumerate(alpha_values):\n    # Compute alpha shape\n    alpha_shape = alphashape.alphashape(points, alpha)\n    \n    # Plot the points and the alpha shape\n    ax = axes[i]\n    #print(alpha_shape.type)\n    if alpha_shape.type == 'Polygon':\n        ax.plot(*alpha_shape.exterior.xy, color='red', lw=2, label='Alpha Shape')\n    ax.scatter(points[:, 0], points[:, 1], color='orange', s=10, label='Point Cloud')\n    \n    \n    \n    ax.set_title(f'Alpha Shape with alpha={alpha}')\n    ax.legend()\n    ax.grid(True)\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/k7/s0t_zwg11h56xb5xp339s5pm0000gp/T/ipykernel_79886/3060572730.py:13: ShapelyDeprecationWarning:\n\nThe 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-2.png){width=573 height=565}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}