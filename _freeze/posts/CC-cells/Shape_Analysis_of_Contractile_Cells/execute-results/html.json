{
  "hash": "4a36f2c8edbf175fa7672ca987093556",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Shape Analysis of Contractile Cells\nexecute:\n  freeze: true\ndate: October 28th 2024\nauthor:\n  - name: Yuqi Xiao\ncategories:\n  - biology\n  - cell morphology\nbibliography: references.bib\n---\n\n\n# Introduction\n\nCapsular contracture (CC) is an ailing complication that arises commonly amonst breast cancer patients after reconstructive breast implant surgery. CC patients suffer from aesthetic deformation, pain, and in rare cases, they may develop anaplastic large cell lymphoma (ALCL), a type of cancer of the immune system. The mechanism of CC is unknown, and there are few objective assessments of CC based on histology.\n\n<center><img src=\"Baker_grade.png\" width=\"600\"/></center>\n<center>Figure 1: Baker grade</center>\n\nBaker grade is a subjective, clinical evaluation for the extent of CC (See Fig 1). Many researchers have measured histological properties in CC tissue samples, and correlated theses findings to their assigned Baker grade. It has been found that a high density of immune cells is associated with higher Baker grade. \n\nThese immune cells include fibroblasts and myofibroblasts, which can distort surrounding tissues by contracting and pulling on them. The transition from the fibroblast to myofibroblast phenotype is an important driving step in many fibrotic processes including capsular contracture. In wound healing processes, the contactility of myofibroblasts is essential in facilitating tissue remodelling, however, an exess amount of contratile forces creates a positive feedback loop, leading to the formation of pathological capsules with high density and extent of deformation. \n\nMyofibroblasts, considered as an \"activated\" form of fibroblasts, is identified by the expression of alpha-smooth muscle actin ($\\alpha$-SMA). However, this binary classification system does not capture the full range of complexities involved in the transition between these two phenotypes. Therefore, it is beneficial to develop a finer classification system of myofibroblasts to explain various levels of forces they can generate. One recent work uses pre-defined morphological features of cells, including perimeter and circularity, to create a continuous spectrum of myofibroblast activation [@hillsley2022strategy].\n\n[//]: # (Past work 1 including single cell force profiling: https://pmc.ncbi.nlm.nih.gov/articles/PMC7104857/#s2)\n[//]: # (Past work 2 including morphological features: https://pmc.ncbi.nlm.nih.gov/articles/PMC9293987/#Sec2)\n\nResearch suggests that mechanical strain induces change in cell morphology, inducing round cells that are lacking in stress fibers into more broad, elongated shapes. We hypothesize that cell shapes influence their ability to generate forces via mechanisms of cell-matrix adheshion and cell traction. Further, we hypothesis that cell shape is directly correlated with the severity of CC by increasing contractile forces.\n\nIn order to test these hypothesis, we will take a 2-step approach. The first step involves statistical analysis on correlation between cell shapes and their associated Baker grade. To do this, we collect cell images from CC samples with various Baker grades, using Geomstat we can compute a characteristic mean cell shape for each sample. Then, we cluster these characteristic cell shapes into 4 groups, and observe the extent of overlap between this classification and the Baker grade. We choose the elastic metric, associated with its geodesic distances, since it allows us to not only looking at classification, but also how cell shape deforms. If we can find a correlation, the second step is then to go back to in-vitro studies of fibroblasts, and answer the question: can the shapes of cells predict their disposition to developing into a highly contractile phenotype (linked to more severe CC)? I don't have a concrete plan for this second step yet, however, it motivates this project as it may suggest a way to predict clinical outcomes based on pre-operative patient assessment. \n\n# Cell segmentation\n\nI was provided with histological images of CC tissues, by a group in Coppenhagen \\{add credit and citations\\}. The images are $\\alpha$-SMA stained in order to visualize myofibroblasts, each image is associated with a Baker Grade and the age of the implant. The first step is to preprocess the images and segment the cells. Fiji is a great tool for this purpose.\n\n> **_TO ADD:_**  details on training the classifier. \n\n# Pre-Processing\n\n## Sort labelling data\n\nThe segmentation data can be exported as a file containing 2D coordinates of all pixels that are marked as borders. First, we need to identify individual cells from this data. We may view pixels as nodes in a graph, the problem then becomes splitting an unconnected graph into connected components. A tricky part is to process cells with overlapping/connected borders. \n> **_TO ADD:_**  details on this algorithm. \n\nFrom here, a few simple bash commands allow us to import the resulting data files as a numpy array of 2D coordinates, as an acceptable input for GeomStats.\n\n``` \n# replace delimiters with sed\nsed -i 's/],/\\n/g' *\nsed -i 's/,/ /g' *\n\n# remove [ with sed\nsed -i 's|[[]||g' * \n```\n\n::: {#1819760a .cell execution_count=1}\n``` {.python .cell-code}\nimport sys\nfrom pathlib import Path\nimport numpy as np\nfrom decimal import Decimal\nimport matplotlib.pyplot as plt\n\n# sys.prefix = '/home/uki/Desktop/blog/posts/capsular-contracture/.venv'\n# sys.executable = '/home/uki/Desktop/blog/posts/capsular-contracture/.venv/bin/python'\nsys.path=['', '/opt/petsc/linux-c-opt/lib', '/home/uki/Desktop/blog/posts/capsular-contracture', '/usr/lib/python312.zip', '/usr/lib/python3.12', '/usr/lib/python3.12/lib-dynload', '/home/uki/Desktop/blog/posts/capsular-contracture/.venv/lib/python3.12/site-packages']\n\ndirectory = Path('/home/uki/Desktop/blog/posts/capsular-contracture/cells')\nfile_iterator = directory.iterdir()\ncells = []\n\nfor filename in file_iterator:\n    with open(filename) as file:\n        cell = np.loadtxt(file, dtype=int)\n        cells.append(cell)\n\nprint(f\"Total number of cells : {len(cells)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal number of cells : 3\n```\n:::\n:::\n\n\nSince the data is unordered, we need to sort the coordinates in order to visualize cell shapes.\n\n::: {#aaa91816 .cell execution_count=2}\n``` {.python .cell-code}\ndef sort_coordinates(list_of_xy_coords):\n    cx, cy = list_of_xy_coords.mean(0)\n    x, y = list_of_xy_coords.T\n    angles = np.arctan2(x-cx, y-cy)\n    indices = np.argsort(angles)\n    return list_of_xy_coords[indices]\n```\n:::\n\n\n::: {#95b6ced7 .cell execution_count=3}\n``` {.python .cell-code}\nsorted_cells = []\n\nfor cell in cells:\n    sorted_cells.append(sort_coordinates(cell))\n```\n:::\n\n\n::: {#f4c60ee6 .cell execution_count=4}\n``` {.python .cell-code}\nindex = 1\ncell_rand = cells[index]\ncell_sorted = sorted_cells[index]\n\nfig = plt.figure(figsize=(15, 5))\n\nfig.add_subplot(121)\nplt.scatter(cell_rand[:, 0], cell_rand[:, 1], color='black', s=4)\n\nplt.plot(cell_rand[:, 0], cell_rand[:, 1])\nplt.axis(\"equal\")\nplt.title(f\"Original coordinates\")\nplt.axis(\"off\")\n\nfig.add_subplot(122)\nplt.scatter(cell_sorted[:, 0], cell_sorted[:, 1], color='black', s=4)\n\nplt.plot(cell_sorted[:, 0], cell_sorted[:, 1])\nplt.axis(\"equal\")\nplt.title(f\"sorted coordinates\")\nplt.axis(\"off\")\n```\n\n::: {.cell-output .cell-output-display}\n![](Shape_Analysis_of_Contractile_Cells_files/figure-html/cell-5-output-1.png){width=1135 height=409}\n:::\n:::\n\n\n_______________________\n> **_Original work ends around here, the below is a proof of concept mock pipeline performed on 3 cells, that needs to be adapted._**\n_______________________\n\n## Interpolation and removing duplicate sample points\n\n::: {#589539a6 .cell execution_count=5}\n``` {.python .cell-code}\nimport geomstats.backend as gs\nfrom common import *\nimport random\nimport os\nimport scipy.stats as stats\nfrom sklearn import manifold\n\ngs.random.seed(2024)\n```\n:::\n\n\n::: {#9f744bcc .cell execution_count=6}\n``` {.python .cell-code}\ndef interpolate(curve, nb_points):\n    \"\"\"Interpolate a discrete curve with nb_points from a discrete curve.\n\n    Returns\n    -------\n    interpolation : discrete curve with nb_points points\n    \"\"\"\n    old_length = curve.shape[0]\n    interpolation = gs.zeros((nb_points, 2))\n    incr = old_length / nb_points\n    pos = 0\n    for i in range(nb_points):\n        index = int(gs.floor(pos))\n        interpolation[i] = curve[index] + (pos - index) * (\n            curve[(index + 1) % old_length] - curve[index]\n        )\n        pos += incr\n    return interpolation\n\n\nk_sampling_points = 2000\n```\n:::\n\n\n::: {#d2e2310e .cell execution_count=7}\n``` {.python .cell-code}\nindex = 2\ncell_rand = sorted_cells[index]\ncell_interpolation = interpolate(cell_rand, k_sampling_points)\n\nfig = plt.figure(figsize=(15, 5))\n\nfig.add_subplot(121)\nplt.scatter(cell_rand[:, 0], cell_rand[:, 1], color='black', s=4)\n\nplt.plot(cell_rand[:, 0], cell_rand[:, 1])\nplt.axis(\"equal\")\nplt.title(f\"Original curve ({len(cell_rand)} points)\")\nplt.axis(\"off\")\n\nfig.add_subplot(122)\nplt.scatter(cell_interpolation[:, 0], cell_interpolation[:, 1], color='black', s=4)\n\nplt.plot(cell_interpolation[:, 0], cell_interpolation[:, 1])\nplt.axis(\"equal\")\nplt.title(f\"Interpolated curve ({k_sampling_points} points)\")\nplt.axis(\"off\")\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n(np.float64(810.1893750000002),\n np.float64(850.848125),\n np.float64(18.650075000000008),\n np.float64(48.34842499999986))\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Shape_Analysis_of_Contractile_Cells_files/figure-html/cell-8-output-2.png){width=1135 height=409}\n:::\n:::\n\n\n::: {#66e6cbd9 .cell execution_count=8}\n``` {.python .cell-code}\ndef preprocess(curve, tol=1e-10):\n    \"\"\"Preprocess curve to ensure that there are no consecutive duplicate points.\n\n    Returns\n    -------\n    curve : discrete curve\n    \"\"\"\n\n    dist = curve[1:] - curve[:-1]\n    dist_norm = np.sqrt(np.sum(np.square(dist), axis=1))\n\n    if np.any( dist_norm < tol ):\n        for i in range(len(curve)-1):\n            if np.sqrt(np.sum(np.square(curve[i+1] - curve[i]), axis=0)) < tol:\n                curve[i+1] = (curve[i] + curve[i+2]) / 2\n\n    return curve\n```\n:::\n\n\n::: {#6fae8ea3 .cell execution_count=9}\n``` {.python .cell-code}\ninterpolated_cells = []\n\nfor cell in sorted_cells:\n    interpolated_cells.append(preprocess(interpolate(cell, k_sampling_points)))\n```\n:::\n\n\n## Alignment\n\n::: {#5c547b74 .cell execution_count=10}\n``` {.python .cell-code}\nfrom geomstats.geometry.pre_shape import PreShapeSpace\n\nAMBIENT_DIM = 2\n\nPRESHAPE_SPACE = PreShapeSpace(ambient_dim=AMBIENT_DIM, k_landmarks=k_sampling_points)\n\nPRESHAPE_SPACE.equip_with_group_action(\"rotations\")\nPRESHAPE_SPACE.equip_with_quotient()\n\n\ndef exhaustive_align(curve, base_curve):\n    \"\"\"Align curve to base_curve to minimize the L² distance.\n\n    Returns\n    -------\n    aligned_curve : discrete curve\n    \"\"\"\n    nb_sampling = len(curve)\n    distances = gs.zeros(nb_sampling)\n    base_curve = gs.array(base_curve)\n    for shift in range(nb_sampling):\n        reparametrized = [curve[(i + shift) % nb_sampling] for i in range(nb_sampling)]\n        aligned = PRESHAPE_SPACE.fiber_bundle.align(\n            point=gs.array(reparametrized), base_point=base_curve\n        )\n        distances[shift] = PRESHAPE_SPACE.embedding_space.metric.norm(\n            gs.array(aligned) - gs.array(base_curve)\n        )\n    shift_min = gs.argmin(distances)\n    reparametrized_min = [\n        curve[(i + shift_min) % nb_sampling] for i in range(nb_sampling)\n    ]\n    aligned_curve = PRESHAPE_SPACE.fiber_bundle.align(\n        point=gs.array(reparametrized_min), base_point=base_curve\n    )\n    return aligned_curve\n```\n:::\n\n\n::: {#8d79ef44 .cell execution_count=11}\n``` {.python .cell-code}\naligned_cells = []\nBASE_CURVE = interpolated_cells[0]\n\nfor cell in interpolated_cells:\n    aligned_cells.append(exhaustive_align(cell, BASE_CURVE))\n```\n:::\n\n\n::: {#6e55fd0a .cell execution_count=12}\n``` {.python .cell-code}\nindex = 1\nunaligned_cell = interpolated_cells[index]\naligned_cell = exhaustive_align(unaligned_cell, BASE_CURVE)\n\nfig = plt.figure(figsize=(15, 5))\n\nfig.add_subplot(131)\nplt.plot(BASE_CURVE[:, 0], BASE_CURVE[:, 1])\nplt.plot(BASE_CURVE[0, 0], BASE_CURVE[0, 1], \"ro\")\nplt.axis(\"equal\")\nplt.title(\"Reference curve\")\n\nfig.add_subplot(132)\nplt.plot(unaligned_cell[:, 0], unaligned_cell[:, 1])\nplt.plot(unaligned_cell[0, 0], unaligned_cell[0, 1], \"ro\")\nplt.axis(\"equal\")\nplt.title(\"Unaligned curve\")\n\nfig.add_subplot(133)\nplt.plot(aligned_cell[:, 0], aligned_cell[:, 1])\nplt.plot(aligned_cell[0, 0], aligned_cell[0, 1], \"ro\")\nplt.axis(\"equal\")\nplt.title(\"Aligned curve\")\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nText(0.5, 1.0, 'Aligned curve')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Shape_Analysis_of_Contractile_Cells_files/figure-html/cell-13-output-2.png){width=1162 height=431}\n:::\n:::\n\n\n# Data Analysis\n\n::: {#500f6167 .cell execution_count=13}\n``` {.python .cell-code}\nfrom geomstats.geometry.discrete_curves import DiscreteCurvesStartingAtOrigin\n\ncell_start = aligned_cells[0]\ncell_end = aligned_cells[1]\n\nCURVES_SPACE_SRV = DiscreteCurvesStartingAtOrigin(ambient_dim=2, k_sampling_points=2000)\n\ncell_start_at_origin = CURVES_SPACE_SRV.projection(cell_start)\ncell_end_at_origin = CURVES_SPACE_SRV.projection(cell_end)\n\ngeodesic_func = CURVES_SPACE_SRV.metric.geodesic(\n    initial_point=cell_start_at_origin, end_point=cell_end_at_origin\n)\n\nn_times = 30\ntimes = gs.linspace(0.0, 1.0, n_times)\ngeod_points = geodesic_func(times)\n```\n:::\n\n\n::: {#eb93a825 .cell execution_count=14}\n``` {.python .cell-code}\nfig = plt.figure(figsize=(10, 2))\nplt.title(\"Geodesic between two cells\")\nplt.axis(\"off\")\n\nfor i, curve in enumerate(geod_points):\n    fig.add_subplot(2, n_times // 2, i + 1)\n    plt.plot(curve[:, 0], curve[:, 1])\n    plt.axis(\"equal\")\n    plt.axis(\"off\")\n```\n\n::: {.cell-output .cell-output-display}\n![](Shape_Analysis_of_Contractile_Cells_files/figure-html/cell-15-output-1.png){width=763 height=187}\n:::\n:::\n\n\n::: {#ed5030f3 .cell execution_count=15}\n``` {.python .cell-code}\nplt.figure(figsize=(12, 12))\nfor i in range(1, n_times - 1):\n    plt.plot(geod_points[i, :, 0], geod_points[i, :, 1], \"o-\", color=\"lightgrey\")\nplt.plot(geod_points[0, :, 0], geod_points[0, :, 1], \"o-b\", label=\"Start Cell\")\nplt.plot(geod_points[-1, :, 0], geod_points[-1, :, 1], \"o-r\", label=\"End Cell\")\n\nplt.title(\"Geodesic for the Square Root Velocity metric\")\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](Shape_Analysis_of_Contractile_Cells_files/figure-html/cell-16-output-1.png){width=951 height=949}\n:::\n:::\n\n\n::: {#9ee14929 .cell execution_count=16}\n``` {.python .cell-code}\nfrom geomstats.learning.frechet_mean import FrechetMean\n\nmean = FrechetMean(CURVES_SPACE_SRV)\n\ncell_shapes_at_origin = CURVES_SPACE_SRV.projection(gs.array(aligned_cells))\nmean.fit(cell_shapes_at_origin[:500])\n\nmean_estimate = mean.estimate_\n\nplt.plot(mean_estimate[:, 0], mean_estimate[:, 1], \"black\");\n```\n\n::: {.cell-output .cell-output-display}\n![](Shape_Analysis_of_Contractile_Cells_files/figure-html/cell-17-output-1.png){width=579 height=411}\n:::\n:::\n\n\n::: {#7a2a6c11 .cell execution_count=17}\n``` {.python .cell-code}\nprint(gs.sum(gs.isnan(mean_estimate)))\nmean_estimate_clean = mean_estimate[~gs.isnan(gs.sum(mean_estimate, axis=1)), :]\nprint(mean_estimate_clean.shape)\nmean_estimate_clean = interpolate(mean_estimate_clean, k_sampling_points - 1)\nprint(gs.sum(gs.isnan(mean_estimate_clean)))\nprint(mean_estimate_clean.shape)\n\nprint(cell_shapes_at_origin.shape)\nfor cell_at_origin in cell_shapes_at_origin:\n    plt.plot(cell_at_origin[:, 0], cell_at_origin[:, 1], \"lightgrey\", alpha=0.2)\n\nplt.plot(\n    mean_estimate_clean[:, 0], mean_estimate_clean[:, 1], \"black\", label=\"Mean cell\"\n)\nplt.legend(fontsize=12);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n(1999, 2)\n0\n(1999, 2)\n(3, 1999, 2)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Shape_Analysis_of_Contractile_Cells_files/figure-html/cell-18-output-2.png){width=570 height=414}\n:::\n:::\n\n\nProblems:\n1. Some weird shape are reading weird (potentially wrong?)\n2. Need some kind of bash or python script to process labelling data into numpy arrays\n3. Labelling coordinates comes in a clump, can't think of a easy way to process overlaps of cells (might discard)\n4. Cell shapes are in 2D, lose information\n\n",
    "supporting": [
      "Shape_Analysis_of_Contractile_Cells_files"
    ],
    "filters": [],
    "includes": {}
  }
}