[
  {
    "objectID": "posts/quasiconformalmap/index.html#theorem",
    "href": "posts/quasiconformalmap/index.html#theorem",
    "title": "Quasiconformal mapping in 1D",
    "section": "Theorem",
    "text": "Theorem"
  },
  {
    "objectID": "posts/AFM-data/index.html#raw-image-pre-processing",
    "href": "posts/AFM-data/index.html#raw-image-pre-processing",
    "title": "Extracting cell geometry from AFM",
    "section": "Raw image pre-processing",
    "text": "Raw image pre-processing"
  },
  {
    "objectID": "posts/AFM-data/index.html#segmentation",
    "href": "posts/AFM-data/index.html#segmentation",
    "title": "Extracting cell geometry from AFM",
    "section": "Segmentation",
    "text": "Segmentation"
  },
  {
    "objectID": "posts/AFM-data/index.html#centerline",
    "href": "posts/AFM-data/index.html#centerline",
    "title": "Extracting cell geometry from AFM",
    "section": "Centerline",
    "text": "Centerline"
  },
  {
    "objectID": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html",
    "href": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html",
    "title": "Hand gesture classification with EMG data using Riemannian metrics",
    "section": "",
    "text": "Geomstats is a Python package for computations, statistics, machine learning, and deep learning on manifolds (Miolane et al. 2020).\nThe package is organized into two main modules: geometry and learning. The module geometry implements differential geometry: manifolds, Lie groups, fiber bundles, shape spaces, information manifolds, Riemannian metrics, and more. The module learning implements statistics and learning algorithms for data on manifolds. Users can choose between backends: NumPy, Autograd, or PyTorch.\nThis notebook is adapted from here\nIn this notebook we are using EMG time series collected by 8 electrodes placed on the arm skin. We are going to show how to:\n\nProcess these kind of signal into covariance matrices that we can manipulate with geomstats tools.\nHow to apply ML algorithms on this data to classify four different hand gestures present in the data (Rock, Paper, Scissors, Ok).\nHow do the different methods (using Riemanian metrics, projecting on tangent space, Euclidean metric) compare to each other."
  },
  {
    "objectID": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#introduction",
    "href": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#introduction",
    "title": "Hand gesture classification with EMG data using Riemannian metrics",
    "section": "",
    "text": "Geomstats is a Python package for computations, statistics, machine learning, and deep learning on manifolds (Miolane et al. 2020).\nThe package is organized into two main modules: geometry and learning. The module geometry implements differential geometry: manifolds, Lie groups, fiber bundles, shape spaces, information manifolds, Riemannian metrics, and more. The module learning implements statistics and learning algorithms for data on manifolds. Users can choose between backends: NumPy, Autograd, or PyTorch.\nThis notebook is adapted from here\nIn this notebook we are using EMG time series collected by 8 electrodes placed on the arm skin. We are going to show how to:\n\nProcess these kind of signal into covariance matrices that we can manipulate with geomstats tools.\nHow to apply ML algorithms on this data to classify four different hand gestures present in the data (Rock, Paper, Scissors, Ok).\nHow do the different methods (using Riemanian metrics, projecting on tangent space, Euclidean metric) compare to each other."
  },
  {
    "objectID": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#context",
    "href": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#context",
    "title": "Hand gesture classification with EMG data using Riemannian metrics",
    "section": "Context",
    "text": "Context\nThe data are acquired from somOS-interface: an sEMG armband that allows you to interact via bluetooth with an Android smartphone (you can contact Marius Guerard (marius.guerard@gmail.com) or Renaud Renault (renaud.armand.renault@gmail.com) for more info on how to make this kind of armband yourself).\nAn example of application is to record static signs that are linked with different actions (moving a cursor and clicking, sign recognition for command based personal assistants, …). In these experiments, we want to evaluate the difference in performance (measured as the accuracy of sign recognition) between three different real life situations where we change the conditions of training (when user record signs or “calibrate” the device) and testing (when the app guess what sign the user is doing):\n\n\nWhat is the accuracy when doing sign recognition right after training?\n\n\nWhat is the accuracy when calibrating, removing and replacing the armband at the same position and then testing?\n\n\nWhat is the accuracy when calibrating, removing the armband and giving it to someone else that is testing it without calibration?\n\n\nTo simulate these situations, we record data from two different users (rr and mg) and in two different sessions (s1 or s2). The user put the bracelet before every session and remove it after every session.\nQuick description of the data:\n\nEach row corresponds to one acquisition, there is an acquisition every ~4 ms for 8 electrodes which correspond to a 250Hz acquisition rate.\nThe time column is in ms.\nThe columns c0 to c7 correspond to the electrical value recorded at each of the 8 electrodes (arbitrary unit).\nThe label correspond to the sign being recorded by the user at this time point (‘rest’, ‘rock’, ‘paper’, ‘scissors’, or ‘ok). ’rest’ correspond to a rested arm.\nthe exp identify the user (rr and mg) and the session (s1 or s2)\n\nNote: Another interesting use case, not explored in this notebook, would be to test what is the accruacy when calibrating, removing the armband and giving it to someone else that is calibrating it on its own arm before testing it. The idea being that transfer learning might help getting better results (or faster calibration) than calibrating on one user.\n\n\nShow/Hide Code\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport geomstats.backend as gs\n\nmatplotlib.interactive(True)\ngs.random.seed(2021)\n\n\nINFO: Using numpy backend"
  },
  {
    "objectID": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#parameters",
    "href": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#parameters",
    "title": "Hand gesture classification with EMG data using Riemannian metrics",
    "section": "Parameters",
    "text": "Parameters\n\n\nShow/Hide Code\nN_ELECTRODES = 8\nN_SIGNS = 4"
  },
  {
    "objectID": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#the-data",
    "href": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#the-data",
    "title": "Hand gesture classification with EMG data using Riemannian metrics",
    "section": "The Data",
    "text": "The Data\n\n\nShow/Hide Code\nimport geomstats.datasets.utils as data_utils\n\ndata = data_utils.load_emg()\n\n\n\n\nShow/Hide Code\ndata.head()\n\n\n\n\n\n\n\n\n\ntime\nc0\nc1\nc2\nc3\nc4\nc5\nc6\nc7\nlabel\nexp\n\n\n\n\n0\n23\n127\n123\n128\n134\n125\n128\n130\n124\nrest\nmg_s1\n\n\n1\n28\n126\n130\n128\n119\n129\n128\n126\n133\nrest\nmg_s1\n\n\n2\n32\n129\n130\n127\n125\n129\n129\n127\n130\nrest\nmg_s1\n\n\n3\n36\n127\n128\n126\n123\n128\n127\n125\n131\nrest\nmg_s1\n\n\n4\n40\n127\n128\n129\n124\n127\n129\n127\n128\nrest\nmg_s1\n\n\n\n\n\n\n\n\n\nShow/Hide Code\nfig, ax = plt.subplots(N_SIGNS, figsize=(10, 7))\nlabel_list = [\"rock\", \"scissors\", \"paper\", \"ok\"]\nfor i, label_i in enumerate(label_list):\n    sign_df = data[data.label == label_i].iloc[:100]\n    for electrode in range(N_ELECTRODES):\n        ax[i].plot(sign_df.iloc[:, 1 + electrode])\n        ax[i].title.set_text(label_i)\n\n\n\n\n\n\n\n\n\nWe are removing the sign ‘rest’ for the rest of the analysis.\n\n\nShow/Hide Code\ndata = data[data.label != \"rest\"]\n\n\n\nPreprocessing into covariance matrices\n\n\nShow/Hide Code\nimport numpy as np\n\n### Parameters.\nN_STEPS = 100\nLABEL_MAP = {\"rock\": 0, \"scissors\": 1, \"paper\": 2, \"ok\": 3}\nMARGIN = 1000\n\n\nUnpacking data into arrays for batching\n\n\nShow/Hide Code\ndata_dict = {\n    \"time\": gs.array(data.time),\n    \"raw_data\": gs.array(data[[\"c{}\".format(i) for i in range(N_ELECTRODES)]]),\n    \"label\": gs.array(data.label),\n    \"exp\": gs.array(data.exp),\n}\n\n\n\n\nShow/Hide Code\nfrom geomstats.datasets.prepare_emg_data import TimeSeriesCovariance\n\ncov_data = TimeSeriesCovariance(data_dict, N_STEPS, N_ELECTRODES, LABEL_MAP, MARGIN)\ncov_data.transform()\n\n\nWe check that these matrics belong to the space of SPD matrices.\n\n\nShow/Hide Code\nfrom geomstats.geometry.spd_matrices import SPDMatrices\n\nmanifold = SPDMatrices(N_ELECTRODES, equip=False)\n\n\n\n\nShow/Hide Code\ngs.all(manifold.belongs(cov_data.covs))\n\n\nTrue\n\n\n\nCovariances plot of the euclidean average\n\n\nShow/Hide Code\nfig, ax = plt.subplots(2, 2, figsize=(10, 7))\nfor label_i, i in cov_data.label_map.items():\n    label_ids = np.where(cov_data.labels == i)[0]\n    sign_cov_mat = cov_data.covs[label_ids]\n    mean_cov = np.mean(sign_cov_mat, axis=0)\n    ax[i // 2, i % 2].matshow(mean_cov)\n    ax[i // 2, i % 2].title.set_text(label_i)\n\n\n\n\n\n\n\n\n\nLooking at the euclidean average of the spd matrices for each sign, does not show a striking difference between 3 of our signs (scissors, paper, and ok). Minimum Distance to Mean (MDM) algorithm will probably performed poorly if using euclidean mean here.\n\n\nCovariances plot of the Frechet Mean of the affine invariant metric\n\n\nShow/Hide Code\nfrom geomstats.geometry.spd_matrices import SPDAffineMetric\nfrom geomstats.learning.frechet_mean import FrechetMean\n\n\n\n\nShow/Hide Code\nmanifold.equip_with_metric(SPDAffineMetric)\n\nmean_affine = FrechetMean(manifold)\n\n\n\n\nShow/Hide Code\nfig, ax = plt.subplots(2, 2, figsize=(10, 7))\nfor label_i, i in cov_data.label_map.items():\n    label_ids = np.where(cov_data.labels == i)[0]\n    sign_cov_mat = cov_data.covs[label_ids]\n    mean_affine.fit(X=sign_cov_mat)\n    mean_cov = mean_affine.estimate_\n    ax[i // 2, i % 2].matshow(mean_cov)\n    ax[i // 2, i % 2].title.set_text(label_i)\n\n\n\n\n\n\n\n\n\nWe see that the average matrices computed using the affine invariant metric are now more differenciated from each other and can potentially give better results, when using MDM to predict the sign linked to a matrix sample."
  },
  {
    "objectID": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#sign-classification",
    "href": "posts/convert-notebook-to-quarto/12_rwa_emg_sign_classification.html#sign-classification",
    "title": "Hand gesture classification with EMG data using Riemannian metrics",
    "section": "Sign Classification",
    "text": "Sign Classification\nWe are now going to train some classifiers on those matrices to see how we can accurately discriminate these 4 hand positions. The baseline accuracy is defined as the accuracy we get by randomly guessing the signs. In our case, the baseline accuracy is 25%.\n\n\nShow/Hide Code\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n\n\n\nShow/Hide Code\n# Hiding the numerous sklearn warnings\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\nShow/Hide Code\nimport tensorflow as tf\nfrom scikeras.wrappers import KerasClassifier\n\n\nN_EPOCHS is the number of epochs on which to train the MLP. Recommended is ~100\n\n\nShow/Hide Code\nN_EPOCHS = 10\nN_FEATURES = int(N_ELECTRODES * (N_ELECTRODES + 1) / 2)\n\n\n\nA. Test on the same session and user as Training/Calibration\nIn this first part we are training our model on the same session that we are testing it on. In real life, it corresponds to a user calibrating his armband right before using it. To do this, we are splitting every session in k-folds, training on \\((k-1)\\) fold to test on the \\(k^{th}\\) last fold.\n\n\nShow/Hide Code\nclass ExpResults:\n    \"\"\"Class handling the score collection and plotting among the different experiments.\"\"\"\n\n    def __init__(self, exps):\n        self.exps = exps\n        self.results = {}\n        self.exp_ids = {}\n        # Compute the index corresponding to each session only once at initialization.\n        for exp in set(self.exps):\n            self.exp_ids[exp] = np.where(self.exps == exp)[0]\n\n    def add_result(self, model_name, model, X, y):\n        \"\"\"Add the results from the cross validated pipeline.\n\n        For the model 'pipeline', it will add the cross validated results of every session in the model_name\n        entry of self.results.\n\n        Parameters\n        ----------\n        model_name : str\n            Name of the pipeline/model that we are adding results from.\n        model : sklearn.pipeline.Pipeline\n            sklearn pipeline that we are evaluating.\n        X : array\n            data that we are ingesting in the pipeline.\n        y : array\n            labels corresponding to the data.\n        \"\"\"\n        self.results[model_name] = {\n            \"fit_time\": [],\n            \"score_time\": [],\n            \"test_score\": [],\n            \"train_score\": [],\n        }\n        for exp in self.exp_ids.keys():\n            ids = self.exp_ids[exp]\n            exp_result = cross_validate(\n                pipeline, X[ids], y[ids], return_train_score=True\n            )\n            for key in exp_result.keys():\n                self.results[model_name][key] += list(exp_result[key])\n        print(\n            \"Average training score: {:.4f}, Average test score: {:.4f}\".format(\n                np.mean(self.results[model_name][\"train_score\"]),\n                np.mean(self.results[model_name][\"test_score\"]),\n            )\n        )\n\n    def plot_results(\n        self,\n        title,\n        variables,\n        err_bar=None,\n        save_name=None,\n        xlabel=\"Model\",\n        ylabel=\"Acc\",\n    ):\n        \"\"\"Plot bar plot comparing the different pipelines' results.\n\n        Compare the results added previously using the 'add_result' method with bar plots.\n\n        Parameters\n        ----------\n        title : str\n            Title of the plot.\n        variables : list of array\n            List of the variables to plot (e.g. train_score, test_score,...)\n        err_bar : list of float\n            list of error to use for plotting error bars. If None, std is used by default.\n        save_name : str\n            path to save the plot. If None, plot is not saved.\n        xlabel : str\n            Label of the x-axis.\n        ylabel : str\n            Label of the y-axis.\n        \"\"\"\n        ### Some defaults parameters.\n        w = 0.5\n        colors = [\"b\", \"r\", \"gray\"]\n\n        ### Reshaping the results for plotting.\n        x_labels = self.results.keys()\n        list_vec = []\n        for variable in variables:\n            list_vec.append(\n                np.array(\n                    [self.results[model][variable] for model in x_labels]\n                ).transpose()\n            )\n        rand_m1 = lambda size: np.random.random(size) * 2 - 1\n\n        ### Plots parameters.\n        label_loc = np.arange(len(x_labels))\n        center_bar = [w * (i - 0.5) for i in range(len(list_vec))]\n\n        ### Plots values.\n        avg_vec = [np.nanmean(vec, axis=0) for vec in list_vec]\n        if err_bar is None:\n            err_bar = [np.nanstd(vec, axis=0) for vec in list_vec]\n\n        ### Plotting the data.\n        fig, ax = plt.subplots(figsize=(10, 7))\n        for i, vec in enumerate(list_vec):\n            label_i = variable[i] + \" (n = {})\".format(len(vec))\n            ax.bar(\n                label_loc + center_bar[i],\n                avg_vec[i],\n                w,\n                label=label_i,\n                yerr=err_bar[i],\n                color=colors[i],\n                alpha=0.6,\n            )\n            for j, x in enumerate(label_loc):\n                ax.scatter(\n                    (x + center_bar[i]) + rand_m1(vec[:, j].size) * w / 4,\n                    vec[:, j],\n                    color=colors[i],\n                    edgecolor=\"k\",\n                )\n\n        # Add some text for labels, title and custom x-axis tick labels, etc.\n        ax.set_xlabel(xlabel)\n        ax.set_ylabel(ylabel)\n        ax.set_title(title)\n        ax.set_xticks(label_loc)\n        ax.set_xticklabels(x_labels)\n        ax.legend()\n        plt.legend()\n\n        ### Saving the figure with a timestamp as a name.\n        if save_name is not None:\n            plt.savefig(save_name)\n\n\n\n\nShow/Hide Code\nexp_arr = data.exp.iloc[cov_data.batches]\nintra_sessions_results = ExpResults(exp_arr)\n\n\n\nA.0. Using Logistic Regression on the vectorized Matrix (Euclidean Method)\n\n\nShow/Hide Code\npipeline = Pipeline(\n    steps=[\n        (\"standardize\", StandardScaler()),\n        (\"logreg\", LogisticRegression(solver=\"lbfgs\", multi_class=\"multinomial\")),\n    ]\n)\n\nintra_sessions_results.add_result(\n    model_name=\"logreg_eucl\", model=pipeline, X=cov_data.covecs, y=cov_data.labels\n)\n\n\nAverage training score: 0.9938, Average test score: 0.9168\n\n\n\n\nA.1. Using MLP on the vectorized Matrix (Euclidean Method)\n\n\nShow/Hide Code\ndef create_model(weights=\"initial.weights.h5\", n_features=N_FEATURES, n_signs=N_SIGNS):\n    \"\"\"Create model.\n\n    Function to create model, required for using KerasClassifier and wrapp a Keras model inside a\n    scikitlearn form.\n    We added a weight saving/loading to remove the randomness of the weight initialization (for better comparison).\n    \"\"\"\n    model = tf.keras.models.Sequential(\n        [\n            tf.keras.layers.Dense(\n                n_features, activation=\"relu\", input_shape=(n_features,)\n            ),\n            tf.keras.layers.Dropout(0.2),\n            tf.keras.layers.Dense(17, activation=\"relu\"),\n            tf.keras.layers.Dropout(0.2),\n            tf.keras.layers.Dense(n_signs, activation=\"softmax\"),\n        ]\n    )\n\n    model.compile(\n        loss=\"sparse_categorical_crossentropy\",\n        optimizer=\"rmsprop\",\n        metrics=[\"accuracy\"],\n    )\n    if weights is None:\n        model.save_weights(\"initial.weights.h5\")\n    else:\n        model.load_weights(weights)\n    return model\n\n\ndef create_model_covariance(weights=\"initial.weights.h5\"):\n    \"\"\"Create model covariance.\"\"\"\n    return create_model(weights=weights, n_features=N_FEATURES)\n\n\nUse the line below to generate the ‘initial.weights.h5’ file\n\n\nShow/Hide Code\ngenerate_weights = create_model(weights=None)\n\n\n\n\nShow/Hide Code\npipeline = Pipeline(\n    steps=[\n        (\"standardize\", StandardScaler()),\n        (\"mlp\", KerasClassifier(build_fn=create_model, epochs=N_EPOCHS, verbose=0)),\n    ]\n)\n\nintra_sessions_results.add_result(\n    model_name=\"mlp_eucl\", model=pipeline, X=cov_data.covecs, y=cov_data.labels\n)\n\n\nAverage training score: 0.9598, Average test score: 0.8768\n\n\n\n\nA.2. Using Tangent space projection + Logistic Regression\n\n\nShow/Hide Code\nfrom geomstats.learning.preprocessing import ToTangentSpace\n\npipeline = Pipeline(\n    steps=[\n        (\"feature_ext\", ToTangentSpace(manifold)),\n        (\"standardize\", StandardScaler()),\n        (\"logreg\", LogisticRegression(solver=\"lbfgs\", multi_class=\"multinomial\")),\n    ]\n)\n\nintra_sessions_results.add_result(\n    model_name=\"logreg_affinvariant_tangent\",\n    model=pipeline,\n    X=cov_data.covs,\n    y=cov_data.labels,\n)\n\n\nAverage training score: 0.9959, Average test score: 0.9200\n\n\n\n\nA.3. Using Tangent space projection + MLP\n\n\nShow/Hide Code\npipeline = Pipeline(\n    steps=[\n        (\"feature_ext\", ToTangentSpace(manifold)),\n        (\"standardize\", StandardScaler()),\n        (\n            \"mlp\",\n            KerasClassifier(\n                build_fn=create_model_covariance, epochs=N_EPOCHS, verbose=0\n            ),\n        ),\n    ]\n)\n\nintra_sessions_results.add_result(\n    model_name=\"mlp_affinvariant_tangent\",\n    model=pipeline,\n    X=cov_data.covs,\n    y=cov_data.labels,\n)\n\n\nAverage training score: 0.9744, Average test score: 0.8963\n\n\n\n\nA.4. Using Euclidean MDM\n\n\nShow/Hide Code\nfrom geomstats.geometry.spd_matrices import SPDEuclideanMetric\nfrom geomstats.learning.mdm import RiemannianMinimumDistanceToMean\n\nmanifold.equip_with_metric(SPDEuclideanMetric)\n\npipeline = Pipeline(\n    steps=[\n        (\n            \"clf\",\n            RiemannianMinimumDistanceToMean(manifold),\n        )\n    ]\n)\n\nintra_sessions_results.add_result(\n    model_name=\"mdm_eucl\", model=pipeline, X=cov_data.covs, y=cov_data.labels\n)\n\n\nAverage training score: 0.8498, Average test score: 0.7999\n\n\n\n\nA.5. Using Riemannian MDM\n\n\nShow/Hide Code\npipeline = Pipeline(\n    steps=[\n        (\n            \"clf\",\n            RiemannianMinimumDistanceToMean(manifold),\n        )\n    ]\n)\n\nintra_sessions_results.add_result(\n    model_name=\"mdm_affinvariant\", model=pipeline, X=cov_data.covs, y=cov_data.labels\n)\n\n\nAverage training score: 0.8498, Average test score: 0.7999\n\n\n\n\nSummary plots\n\n\nShow/Hide Code\nintra_sessions_results.plot_results(\"intra_sess\", [\"test_score\"])"
  },
  {
    "objectID": "posts/MATH-612/index.html#instructions",
    "href": "posts/MATH-612/index.html#instructions",
    "title": "Page creation (MATH 612)",
    "section": "Instructions",
    "text": "Instructions\n\nFollow all guidelines for assignments and projects.\nSubmit your work through the designated platforms by the due dates.\nCollaborate with peers but ensure individual work is original."
  },
  {
    "objectID": "posts/MATH-612/index.html#tips",
    "href": "posts/MATH-612/index.html#tips",
    "title": "Page creation (MATH 612)",
    "section": "Tips",
    "text": "Tips\n\nJupyter: Use Jupyter Notebooks for interactive coding and documentation. Great for running small code snippets and visualizing data. Learn more in the Jupyter Notebook Documentation.\nVS Code: A powerful IDE for writing and debugging code. Download it here, and install relevant extensions for Python and LaTeX.\nEnvironments: Use virtual environments like venv or conda to manage dependencies and ensure consistent results across different setups.\nQuarto: Use Quarto for creating high-quality documents, reports, and presentations from your code. It supports markdown and integrates seamlessly with Jupyter and VS Code for reproducible analysis and publication. Check out the Quarto Guide for more information. To get started quickly, you can refer to this GitHub Repository."
  },
  {
    "objectID": "posts/MATH-612/index.html#using-github",
    "href": "posts/MATH-612/index.html#using-github",
    "title": "Page creation (MATH 612)",
    "section": "Using GitHub",
    "text": "Using GitHub\n\nCreate a GitHub Account: Sign up at GitHub.com.\nRepositories: Start by creating a repository to host your project files. Learn how in GitHub’s guide to repositories. Use a .gitignore file to exclude unnecessary files.\nBranches: Work on separate branches (main, dev, feature branches) to manage different versions of your project. More details in GitHub’s guide on branching.\nMerges: Merge changes into the main branch only after thorough review and testing. Learn about merging branches.\nCommit Messages: Write clear, descriptive commit messages to document changes effectively. Follow the best practices for commit messages."
  },
  {
    "objectID": "posts/MATH-612/index.html#using-quarto-to-create-blog-posts",
    "href": "posts/MATH-612/index.html#using-quarto-to-create-blog-posts",
    "title": "Page creation (MATH 612)",
    "section": "Using Quarto to create blog posts",
    "text": "Using Quarto to create blog posts\n\nLog into GitHub: Make sure you have an account and are logged in.\nSend your account username/email to kdd@math.ubc.ca: This is needed to be added to the organization.\nClone the repository: After being added to the organization, clone the repository: https://github.com/bioshape-analysis/blog.\ngit clone https://github.com/bioshape-analysis/blog`\nCreate a new branch: To contribute to the blog, create a new branch using:\ngit checkout -b &lt;branch_name&gt;\n\nVerify your branch and repository location: Use the following command to check if you are in the correct branch and repository:\ngit status\nThis command will show you the current branch you are on and the status of your working directory, ensuring you are working in the right place\n\nNavigate to posts: Go into the posts directory (found here). Create a new folder with a name that represents the content of your blog post.\nCreate or upload your content:\n\nIf using Jupyter Notebooks, upload your .ipynb file.\nIf preferred, create a new notebook for your post. Once done, convert it into Quarto using the command:\nquarto convert your_jupyter_notebook.ipynb -o output_file.qmd\n\nEdit the YAML in your .qmd file: Ensure your YAML is consistent with the main template. For example:\n---\ntitle: \"Title of your blog post\"\ndate: \"Date\" # Format example: August 9 2024\nauthor:\n  - name: \"Your Name\" \ncategories: [] # [biology, bioinformatics, theory, etc.]\nbibliography: references.bib # If referencing anything\n---\nFeel free to add further formatting, but ensure it remains consistent with the main template.\nDelete your Jupyter notebook: After converting it to a .qmd file, delete the original .ipynb file to prevent duplication in the blog post.\nCommit and push your changes: After completing your .qmd file, push your branch to GitHub. A pull request will be automatically created, and once reviewed, it will be merged into the main branch.\n\n\nAdditional Information for Quarto:\n\nAdd Images: You can add images to your Quarto document using markdown syntax:\n![Image Description](path/to/image.png)\nTo add images from a URL:\n![Image Description](https://example.com/image.png)\nAdd References: Manage references by creating a bibliography.bib file with your references in BibTeX format. Link the bibliography file in your Quarto document header (YAML). Cite references in your text using the following syntax:\nThis is a citation [@citation_key].\nOther Edits: Add headers, footnotes, and other markdown features as needed. Customize the layout by editing the YAML header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biological shape analysis (under construction)",
    "section": "",
    "text": "Hand gesture classification with EMG data using Riemannian metrics\n\n\n\n\n\n\ntheory\n\n\n\n\n\n\n\n\n\nAug 9, 2024\n\n\nGeomstats\n\n\n\n\n\n\n\n\n\n\n\n\nQuasiconformal mapping in 1D\n\n\n\n\n\n\ntheory\n\n\n\n\n\n\n\n\n\nAug 9, 2024\n\n\nClément Soubrier\n\n\n\n\n\n\n\n\n\n\n\n\n3D tessellation of biomolecular cavities (new)\n\n\nProtocol for analyzing the ribosome exit tunnel\n\n\n\nexample\n\n\ncryo-EM\n\n\n\n\n\n\n\n\n\nAug 4, 2024\n\n\nArtem Kushner, Khanh Dao Duc\n\n\n\n\n\n\n\n\n\n\n\n\nPage creation (MATH 612)\n\n\nInstructions and tips for MATH 612 students\n\n\n\nMATH 612\n\n\n\n\n\n\n\n\n\nAug 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nExtracting cell geometry from AFM\n\n\nPart 1: Static analysis\n\n\n\nbiology\n\n\nbioinformatics\n\n\n\n\n\n\n\n\n\nJul 31, 2024\n\n\nClément Soubrier, Khanh Dao Duc\n\n\n\n\n\n\n\n\n\n\n\n\nElastic metric for cell shape analysis\n\n\n\n\n\n\nbiology\n\n\nbioinformatics\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nClément Soubrier, Khanh Dao Duc\n\n\n\n\n\n\n\n\n\n\n\n\nAlignment of 3D volumes with Optimal Transport\n\n\nApplication to cryoEM density maps\n\n\n\nbiology\n\n\nbioinformatics\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nClément Soubrier, Khanh Dao Duc\n\n\n\n\n\n\n\n\n\n\n\n\nPoint cloud representation of 3D volumes\n\n\nApplication to cryoEM density maps\n\n\n\nbiology\n\n\nbioinformatics\n\n\n\n\n\n\n\n\n\nJul 28, 2024\n\n\nClément Soubrier, Khanh Dao Duc\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/ribosome-tunnel-new/index.html",
    "href": "posts/ribosome-tunnel-new/index.html",
    "title": "3D tessellation of biomolecular cavities (new)",
    "section": "",
    "text": "We present a protocol to extract the surface of a biomolecular cavity for shape analysis and molecular simulations.\nWe apply and illustrate the protocol on the ribosome structure, which contains a subcompartment known as the ribosome exit tunnel. More details on the tunnel features and biological importance can be found in our previous works1,2. The protocol was also design to refine the output obtained from MOLE software3\n\n\n\nIllustration of the ribosome exit tunnel (from Dao Duc et al., NAR 2019)"
  },
  {
    "objectID": "posts/ribosome-tunnel-new/index.html#summary-and-background",
    "href": "posts/ribosome-tunnel-new/index.html#summary-and-background",
    "title": "3D tessellation of biomolecular cavities (new)",
    "section": "",
    "text": "We present a protocol to extract the surface of a biomolecular cavity for shape analysis and molecular simulations.\nWe apply and illustrate the protocol on the ribosome structure, which contains a subcompartment known as the ribosome exit tunnel. More details on the tunnel features and biological importance can be found in our previous works1,2. The protocol was also design to refine the output obtained from MOLE software3\n\n\n\nIllustration of the ribosome exit tunnel (from Dao Duc et al., NAR 2019)"
  },
  {
    "objectID": "posts/ribosome-tunnel-new/index.html#data-preparation",
    "href": "posts/ribosome-tunnel-new/index.html#data-preparation",
    "title": "3D tessellation of biomolecular cavities (new)",
    "section": "0. Data preparation",
    "text": "0. Data preparation"
  },
  {
    "objectID": "posts/ribosome-tunnel-new/index.html#pre-processing",
    "href": "posts/ribosome-tunnel-new/index.html#pre-processing",
    "title": "3D tessellation of biomolecular cavities (new)",
    "section": "1. Pre-processing",
    "text": "1. Pre-processing"
  },
  {
    "objectID": "posts/ribosome-tunnel-new/index.html#voxelization",
    "href": "posts/ribosome-tunnel-new/index.html#voxelization",
    "title": "3D tessellation of biomolecular cavities (new)",
    "section": "2. Voxelization",
    "text": "2. Voxelization"
  },
  {
    "objectID": "posts/ribosome-tunnel-new/index.html#tessellation",
    "href": "posts/ribosome-tunnel-new/index.html#tessellation",
    "title": "3D tessellation of biomolecular cavities (new)",
    "section": "3. Tessellation",
    "text": "3. Tessellation"
  }
]